<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Core\App;
use Cake\Datasource\ConnectionManager;


/**
 * CoUsuarios Controller
 *
 * @property \App\Model\Table\CoUsuariosTable $CoUsuarios
 */
class CoUsuariosController extends AppController
{
  public $paginate = array();

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
//        $this->Auth->allow(['add']);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
//        pr($this->Auth->user());exit;
        // $coUsuarios = $this->paginate($this->CoUsuarios);
				// pr($coUsuarios);exit;
        // $this->set(compact('coUsuarios'));
        // $this->set('_serialize', ['coUsuarios']);
    }

    public function getData()
    {
         $aColumns = array
                        (
                                'CoUsuarios.id',
                                'CoUsuarios.nombre',
                                'CoUsuarios.paterno',
                                'CoUsuarios.materno',
                                'CoUsuarios.login',
                                'CoUsuarios.ultimo_acceso'
                                );

        $sIndexColumn = "CoUsuarios.id";

        //Verificamos que nos enviaron la cantidad de registros que se requieren por pagina
        if(isset($this->request->query['iDisplayLength']))
        {
			$this->paginate['maxLimit'] =$this->request->query['iDisplayLength'];
        	$this->paginate['limit'] =$this->request->query['iDisplayLength'];        
        }

        //Verificamos si nos enviaron la pagina que desean visualizar
        if(isset($this->request->query['iDisplayStart']))
        {
            //Se realiza la division para obtener el numero de pagina
            $this->paginate['page'] = ($this->request->query['iDisplayStart']/$this->request->query['iDisplayLength'])+1;
        }
        //Verificamos si se envio algun orden de columna en especifico
        if(isset($this->request->query['iSortCol_0']))
        {
            $orden = [];
            for ( $i=0 ; $i < intval( $this->request->query['iSortingCols'] ) ; $i++ )
            {
                if ( $this->request->query[ 'bSortable_'.intval($this->request->query['iSortCol_'.$i]) ] == "true" )
                {

                    $column =  $aColumns[ intval( $this->request->query['iSortCol_'.$i] ) ];

                    $order = ($this->request->query['sSortDir_'.$i]==='asc' ? 'asc' : 'desc');
                    $orden = [
                        $column => $order
                    ];
                }
            }
            //Si la cadena no esta vacia se la agregamos a las opciones del paginador en la opcion "order"
            if ( !empty($orden))
            {
                $this->paginate['order'] = $orden;

            }
        }

        //Revisamos si se envio el filtro para todos los campos
        $conditions = array();
        if ( isset($this->request->query['sSearch']) && $this->request->query['sSearch'] != "" )
        {
            for ( $i=0 ; $i < count($aColumns) ; $i++ )
            {
                $conditions[][$aColumns[$i].' LIKE']='%'.$this->request->query['sSearch'].'%';
            }
            //Si el arreglo de condiciones no esta vacio, lo pasamos a las opciones del Paginador con el operador OR
            if(!empty($conditions))
            {
                $this->paginate['conditions']['OR'] = $conditions;
            }
        }
        //Verificamos si se envio algun filtro de campo especifico
        for ( $i=0 ; $i < count($aColumns) ; $i++ )
        {
            if ( isset($this->request->query['bSearchable_'.$i]) && $this->request->query['bSearchable_'.$i] == "true" && ($this->request->query['sSearch_'.$i] != '' || $this->request->query['sSearch'] != '') )
            {
                if(!empty($this->request->query['sSearch']))
                    $this->paginate['conditions']['OR'][][$aColumns[$i].' LIKE']='%'.$this->request->query['sSearch'].'%';
                else
                    $this->paginate['conditions']['OR'][][$aColumns[$i].' LIKE']='%'.$this->request->query['sSearch_'.$i].'%';
            }
        }

        if(!empty($this->paginate['conditions']))
        {
            $query = $this->CoUsuarios->find()->where($this->paginate['conditions']);
            $this->paginate['sortWhitelist'] = [
                                                 	'CoUsuarios.id',
					                                'CoUsuarios.nombre',
					                                'CoUsuarios.paterno',
					                                'CoUsuarios.materno',
					                                'CoUsuarios.login',
					                                'CoUsuarios.ultimo_acceso'
                                               ];
                                                
            $this->paginate['contain'] = [
//                                            'CatEmpleados'
                                         ];

            $coUsuarios = $this->paginate($query);
        }
        else
        {
            $this->paginate['contain'] = [
//            								'CatEmpleados'
            								];
            $this->paginate['sortWhitelist'] = [
                                                'CoUsuarios.id',
                                                'CoUsuarios.nombre',
                                                'CoUsuarios.paterno',
                                                'CoUsuarios.materno',
                                                'CoUsuarios.login',
                                                'CoUsuarios.ultimo_acceso'
                                                ];

            $coUsuarios = $this->paginate('CoUsuarios');
        }
        //Numero total de registros
        $iTotalDisplayRecords = $this->request->params['paging']['CoUsuarios']['count'];

        //Numero de registros encontrados
        $iTotalRecords = $this->request->params['paging']['CoUsuarios']['current'];

        //sEcho
        $sEcho = intval($this->request->query['sEcho']);

        //Datos para la tabla
        $aaData = array();

        //Cargamos los Helper para armar los links de acciones
        $View = new \App\View\AppView();
        //App::import('Helper', 'Html');
        App::classname('Html', 'View/Helper', 'Helper');
        $Html = $View->loadHelper('Html');
        $Form = $View->loadHelper('Form');

        $i = 0;
        foreach($coUsuarios as $coUsuario)
        {

            $actions = "<div class='btn-group'>";
                $actions .= $Html->link("<i class='icon md-eye' aria-hidden='true'></i>",array('action'=>'view',$coUsuario->id),array('escape'=>false,'class'=>"btn btn-default"));
                $actions .= $Html->link("<i class='icon md-edit' aria-hidden='true'></i>",array('action'=>'edit',$coUsuario->id),array('escape'=>false,'class'=>"btn btn-default"));
                $actions .= $Form->postLink("<i class='icon md-delete' aria-hidden='true'></i>", ['action' => 'delete',$coUsuario->id], ['escape'=>false,'class'=>"btn btn-danger",'confirm' => __('Realmente desea eliminar el registro con el Id # {0}?', $coUsuario->id)]);
            $actions .="</div>";
                $aaData[$i][] = $coUsuario->id;
                $aaData[$i][] = $coUsuario->nombre;
                $aaData[$i][] = $coUsuario->paterno;
                $aaData[$i][] = $coUsuario->materno;
                $aaData[$i][] = $coUsuario->login;
				$aaData[$i][] = ($coUsuario->ultimo_acceso) ? date('d-m-Y H:i a',strtotime($coUsuario->ultimo_acceso)) : 'SIN ACCESO';
				$aaData[$i][] = ($coUsuario->activo) ? '<span class="label label-success">SI</span>' : '<span class="label label-danger">NO</span>';

            $aaData[$i][] = $actions;
            $i++;
        }
        //Enviamos y serializamos en JSON todas la variables requeridas por el jquery.dataTable
        $this->set(compact('sEcho','iTotalRecords','iTotalDisplayRecords','aaData'));
        $this->set('_serialize',array('sEcho','iTotalRecords','iTotalDisplayRecords','aaData'));
        $this->set('_jsonp',true);
    }

    /**
     * View method
     *
     * @param string|null $id Co Usuario id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $coUsuario = $this->CoUsuarios->get($id,[
										            'contain' => ['CoGrupos']
										        ]);	
//        pr($coUsuario->toArray());exit;
        $this->set('coUsuario', $coUsuario);
        $this->set('_serialize', ['coUsuario']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $coUsuario = $this->CoUsuarios->newEntity();
        if ($this->request->is('post')) 
        {
//            pr($this->request->data);exit;
            $coUsuario = $this->CoUsuarios->patchEntity($coUsuario, $this->request->data);
            if ($this->CoUsuarios->save($coUsuario)) 
            {
                $this->Flash->flash('Registro guardado.', [
                                                        'params' =>
			                                                        [
			                                                        'type' => 'success'
			                                                        ]
                                                      ]);
                
                return $this->redirect(['action' => 'index']);
            } 
            else 
            {
            	$this->Flash->flash('El Registro no pudo ser guardado.', [
                                                                      'params' =>
			                                                                      [
			                                                                      'type' => 'danger'
			                                                                      ]
                                                                      ]);
            }
        }
        $coGrupos = $this->CoUsuarios->CoGrupos->find('list', ['limit' => 200]);
        
        $this->set(compact('coUsuario','coGrupos','catNivelAcademicos'));
        $this->set('_serialize', ['coUsuario']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Co Usuario id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
     public function edit($id = null)
     {
         $coUsuario = $this->CoUsuarios->get($id, [
             'contain' => ['CoGrupos'],
            //  'fields'=>['id','titulo_academico','nombre','paterno','materno','email','login','activo','cat_tipos_integrante_id','cat_niveles_puesto_id','cat_puesto_id','cat_cargo_id','cat_area_id']
         ]);
         if ($this->request->is(['patch', 'post', 'put'])) {
          //  pr($this->request->data);exit;
             $coUsuario = $this->CoUsuarios->patchEntity($coUsuario, $this->request->data);
             if ($this->CoUsuarios->save($coUsuario)) 
             {
	             $this->Flash->flash('Registro actualizado correctamente.', [
					                                                            'params' =>
								                                                            [
								                                                            'type' => 'success'
								                                                            ]
					                                                          ]); 
                 return $this->redirect(['action' => 'index']);
             } 
             else 
             {
                 $this->Flash->flash('El registro no se pudo actualizar correctamente. Intentelo nuevamente', [
																												'params' =>
																	                                                        [
																	                                                        'type' => 'danger'
																	                                                        ]
														                                                      ]);
             }
         }
         $coGrupos = $this->CoUsuarios->CoGrupos->find('list', ['limit' => 200]);
         $this->set(compact('coUsuario', 'coGrupos'));
         $this->set('_serialize', ['coUsuario']);
     }

    /**
     * Delete method
     *
     * @param string|null $id Co Usuario id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $coUsuario = $this->CoUsuarios->get($id);
        if ($this->CoUsuarios->delete($coUsuario)) 
        {
	        $this->Flash->flash('Registro eliminado correctamente.', [
			                                                            'params' =>
						                                                            [
						                                                            'type' => 'success'
						                                                            ]
			                                                          ]);
        } 
        else 
        {
            $this->Flash->flash('El registro no pudo ser eliminado. Intentelo nuevamente', [
					                                                                       'params' =>
															                                    		[
															                                    		'type' => 'danger'
															                                    		]
																	                       ]);
        }
        return $this->redirect(['action' => 'index']);
    }

    public function login()
    {
        // $this->viewBuilder()->layout('login');
        $this->viewBuilder()->setLayout('login');
        if ($this->request->is('post'))
        {    
            $user = $this->Auth->identify();
            if ($user)
            {
                $this->Auth->setUser($user);

				$connection = ConnectionManager::get('default');
				$connection->update('co_usuarios', ['ultimo_acceso' => date('Y-m-d H:i:s')],['id'=>$this->Auth->user('id')]);
                //Buscar los roles a los que pertenece
                $coGrupos = $this->CoUsuarios->CoGrupos->find('list',['conditions'=>['CoGrupos.activo = 1','CoGrupos.id IN (SELECT co_grupo_id FROM co_usuarios_co_grupos WHERE co_usuario_id ="'.$this->Auth->user('id').'")']]);
                $gruposActivos = array();
                foreach($coGrupos as $id => $coGrupo)
                {
                    $gruposActivos[$id] = $coGrupo;
                }
                $this->request->session()->write('gruposActivos',$gruposActivos);
                return $this->redirect('/');
            }
            $this->request->data['password'] = "";           
            $this->Flash->flash('Datos incorrectos, intentelo nuevamente.', [
                                                                          'params' =>
			                                                                          [
			                                                                          'type' => 'danger'
			                                                                          ]
                                                                          ]); 
            
        }
    }

    public function logout()
    {
        $this->request->session()->destroy();
        return $this->redirect($this->Auth->logout());
    }
}
